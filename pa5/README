/*********************************************************************************
* Despina Patronas, Dpatrona
* 2021 Winter CSE 101 pa5
	README
*********************************************************************************/

	Dictionary.h
		Includes the definitions of structures and prototypes for a Dictionary ADT
		Dictionary ADT is a BST that stores (key, value) pairs of types KEY_TYPE and VAL_TYPE.
	
	Dictionary.c
		Implementation of Dictionary.h

	DictionaryTest.c
		Tests the Dictionary.c ADT functions including:

			-Creation of default Dictionary fields are correct

			-Extremities of the tree are populated by a nill node

			-Cursor position and functions behaves correctly for: 
				-default Dictionary and non empty Dictionary as intended for iterations.
				-Cursor will return proper keys for the element it is currently pointing to

				-(Next) and (Prev) changes cursor position and pointer nodes to left and right
					-returns the new cursor nodes data value
					-otherwise if cursor becomes undefined or was not defined to begin with returns VAL_UNDEF

				-(beginForward) will set the cursor to the trees minimum and return that elements data value
					-will return VAL_UNDEF if there is no elements in the tree

				-(beginReverse) will set the cursor to the trees maximum and return that elements data value
					-will return VAL_UNDEF if there is no elements in the tree

			-lookup in the Dictionary will find a key and return the value otherwise returns VAL_UNDEF
				uses the treeSearch helper function

			-Unique will determine whether duplicates are allowed to be inserted or not

			-Insert considers case where tree is empty, and traverses tree for the proper insertion

			-Delete considers all cases in the tree (leaf, middle, root)

			-makeEmpty sets BST to default state
				-uses delete which uses postorderdelete helper

			-Deconstructor removes the dictionary


				*NOTE: note prints to console shell. no input / output file needed

	Lex.c
		IO operations
			Reads a positive integer number from the bash terminal. 
			This number represents the number of decks to shuffle and their sizes accordingly
			Each deck starts in sorted order
			Perfectly shuffles each deck until original sequence is found
			Outputs onto the terminal the number of shuffles for each deck from [1,n]
			
			Example:
				$./Shuffle 4

				$ deck size | shuffles
				$ 1			| 1
				$ 2			| 2
				$ 3			| 2
				$ 4			| 4
				
			*NOTE: note prints to console shell. no input / output file needed

	Makefile
		make Shuffle 			makes Shuffle executable
		make ListTest 			makes GraphTest executable
		make clean 				removes all binaries
		make checkFind 			tests Shuffle for memory leaks
		make ListTest 			tests GraphTest for memory leaks

	Usage:
		$./Shuffle <positive integer n>
		$./ListTest

